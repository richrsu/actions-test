name: Validate build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Only set for pull request events. The name of the head (feature) branch.
  GITHUB_HEAD_REF: ${{ github.head_ref }}
  # The branch or tag name that triggered the workflow run. Use for manual workflow runs.
  GITHUB_REFNAME: ${{ github.ref_name }}
  # Only set for ____ workflow runs.
  GITHUB_REF: ${{ github.ref }}

jobs:
  build:

    runs-on: ubuntu-latest

    defaults: 
      run: 
        working-directory: tests

    steps:
    - uses: actions/checkout@v2

    - name: Validate composer.json and composer.lock
      run: composer validate

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Get current branch name
      run: |
          echo "GITHUB_BRANCH_NAME=$(git branch --remote --contains | sed "s|[[:space:]]*origin/||")" >> $GITHUB_ENV

    - name: Run tests
      run: ./build/phpunit-run-all-tests-for-build.sh

    - name: Load test results
      id: test_results
      if: always()
      run: |
          # Set environment variables for badge output
          # Build summary results
          php ./build/phpunit-build-summary.php > ./build/test-summary.json
          cat ./build/test-summary.json
          content=`cat ./build/test-summary.json`
          # the following lines are only required for multi line json
          # content="${content//'%'/'%25'}"
          # content="${content//$'\n'/'%0A'}"
          # content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=summaryJson::$content"
          # Badges - Build Date
          echo "BUILD_DATE=$(TZ=America/New_York date)" >> $GITHUB_ENV
          # Badges - Trim SHA
          echo "GITHUB_SHA_SHORT=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

    - name: Badges - Build Date
      if: always()
      uses: schneegans/dynamic-badges-action@v1.1.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: fc3b4e6e926771e0a5934a801f867e23
        filename: ${{ env.BRANCH_NAME }}-build-time.json
        label: Build time
        message: ${{ env.BUILD_DATE }}
        color: blue
        style: plastic
        cacheSeconds: 305

    - name: Badges - SHA
      if: always()
      uses: schneegans/dynamic-badges-action@v1.1.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: fc3b4e6e926771e0a5934a801f867e23
        filename: ${{ env.GITHUB_BRANCH_NAME }}-sha.json
        label: SHA
        message: ${{ env.BUILD_DATE }}
        color: blue
        style: plastic
        cacheSeconds: 305

    - name: Badges - Test Results
      if: always()
      uses: schneegans/dynamic-badges-action@v1.1.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: fc3b4e6e926771e0a5934a801f867e23
        filename: ${{ env.BRANCH_NAME }}-tests.json
        label: Tests
        message: ${{fromJson(steps.test_results.outputs.summaryJson).tests}} run, ${{fromJson(steps.test_results.outputs.summaryJson).passed}} passed, ${{fromJson(steps.test_results.outputs.summaryJson).notPassed}} failed, ${{fromJson(steps.test_results.outputs.summaryJson).assertions}} assertions
        color: ${{fromJson(steps.test_results.outputs.summaryJson).messageBackground}}
        style: plastic
        cacheSeconds: 305